" ============
set nocompatible      " We're running Vim, not Vi!
set guifont=Monaco\ 14

let mapleader=","
let g:mapleader=","

set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#rc()

" let Vundle manage Vundle
Bundle 'gmarik/vundle'

" original repos on github
Bundle 'mileszs/ack.vim'
Bundle 'rking/ag.vim'
Bundle 'tpope/vim-fugitive'
Bundle 'vim-ruby/vim-ruby'
Bundle 'tpope/vim-rails.git'
Bundle 'ervandew/supertab'
Bundle 'msanders/snipmate.vim'
" Bundle 'Lokaltog/vim-powerline'
Bundle 'vim-airline/vim-airline'
Bundle 'scrooloose/nerdtree'

Bundle 'scrooloose/nerdcommenter'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-endwise'
Bundle 'tpope/vim-vividchalk'
Bundle 'tpope/vim-markdown'
Bundle 'tpope/vim-ragtag'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-rake'
Bundle 'scrooloose/syntastic'
Bundle 'kien/ctrlp.vim'
Bundle 'altercation/vim-colors-solarized'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'godlygeek/tabular'
Bundle 'majutsushi/tagbar'
Bundle 'greyblake/vim-preview'

" 配色方案
" Bundle 'jpo/vim-railscasts-theme'
Bundle 'morhetz/gruvbox'
colorscheme gruvbox

"Bundle 'lsdr/monokai'
" colorscheme monokai

" F11quanping, F6 Open
Bundle 'xolox/vim-misc'
Bundle 'xolox/vim-shell'
" make -f make_gcc.mak
" Bundle 'Shougo/vimproc'
" first should install vimproc
" Bundle 'Shougo/vimshell'
" Bundle 'vimim/vimim'

" vim-scripts repos
Bundle 'L9'
Bundle 'FuzzyFinder'
Bundle 'taglist.vim'
Bundle 'Specky'
Bundle 'matchit.zip'
" map了<lead>r，cofflict with rspec
Bundle 'Mark--Karkat'
Bundle 'bufexplorer.zip'
Bundle 'grep.vim'
"Bundle 'AutoClose'
Bundle 'ZoomWin'
Bundle 'derekwyatt/vim-scala'

" non github repos
"Bundle 'git://git.wincent.com/command-t.git'

" VUNDLE END
" ==========

syntax on             " Enable syntax highlighting
filetype on           " Enable filetype detection
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins
compiler ruby         " Enable compiler support for ruby

set autoindent
set hlsearch
set incsearch
set number
set expandtab
set ruler
set nobackup
set showcmd
set wrap
"set autochdir
"set cursorcolumn
"set cursorline
set cursorline
hi CursorLine  cterm=NONE   ctermbg=244 ctermfg=white
hi CursorColumn cterm=NONE ctermbg=darkred ctermfg=white
set background=dark
set t_Co=256

set tabstop=2 shiftwidth=2 softtabstop=2
set list
set listchars=tab:,.,trail:.,extends:#,nbsp:. " Highlight problematic whitespace
set laststatus=2
" airline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#tab_nr_type = 1 " tab number
let g:airline#extensions#tabline#show_tab_nr = 1
let g:airline#extensions#tabline#formatter = 'default'
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#fnametruncate = 16
let g:airline#extensions#tabline#fnamecollapse = 2
let g:airline#extensions#tabline#buffer_idx_mode = 1

"设置切换Buffer快捷键"
nnoremap <C-N> :bn<CR>
nnoremap <C-P> :bp<CR>

" tab or buf 1
nnoremap <leader>1 :call te#utils#tab_buf_switch(1)<cr>
" tab or buf 2
nnoremap <leader>2 :call te#utils#tab_buf_switch(2)<cr>
" tab or buf 3
nnoremap  <leader>3 :call te#utils#tab_buf_switch(3)<cr>
" tab or buf 4
nnoremap  <leader>4 :call te#utils#tab_buf_switch(4)<cr>
" tab or buf 5
nnoremap  <leader>5 :call te#utils#tab_buf_switch(5)<cr>
" tab or buf 6
nnoremap  <leader>6 :call te#utils#tab_buf_switch(6)<cr>
" tab or buf 7
nnoremap  <leader>7 :call te#utils#tab_buf_switch(7)<cr>
" tab or buf 8
nnoremap  <leader>8 :call te#utils#tab_buf_switch(8)<cr>
" tab or buf 9
nnoremap  <leader>9 :call te#utils#tab_buf_switch(9)<cr>
" airline end
"set linespace=0 " No extra spaces between rows"
" set statusline=%F%m%r%h%w%=\ [ft=%Y]\ %{\"[fenc=\".(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\"+\":\"\").\"]\"}\ [ff=%{&ff}]\ [asc=%03.3b]\ [hex=%02.2B]\ [pos=%04l,%04v][%p%%]\ [len=%L]
set wildmenu " show list instead of just completing
set wildmode=list:longest,full " command <Tab> completion, list matches, then longest common part, then all.

" set encoding=utf-8
set encoding=prc
" set fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1 "add you file type if need
" set termencoding=gbk

" Load matchit (% to bounce from do to end, etc.)
runtime! macros/matchit.vim

""augroup myfiletypes
""" Clear old autocmds in group
""autocmd!
""" autoindent with two spaces, always expand tabs
"autocmd FileType ruby,eruby,yaml set ai sw=2 sts=2 et
""augroup END
""noremap <silent> <F11> :cal VimCommanderToggle()<CR>

let g:speckyBannerKey = "<leade/>rb"
let g:speckyQuoteSwitcherKey = "<leader>r'"
let g:speckyRunRdocKey = "<leader>rd"
let g:speckySpecSwitcherKey = "<leader>rx"
let g:speckyRunSpecKey = "<leader>rs"
"let g:speckyRunSpecCmd = "spec -fs -r loadpath.rb"
let g:speckyRunSpecCmd = "spec -fs -c"
let g:speckyRunRdocCmd = "fri -L -f plain"
let g:speckyWindowType = 1


let g:vim_markdown_folding_disabled=1
"let g:vikiNameSuffix=".viki"
"let g:vikiUseParentSuffix = 1
"autocmd! BufRead,BufNewFile *.viki set filetype=viki

"au GUIEnter * simalt ~x

" An example for a vimrc file.
"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2011 Apr 15
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"	    for OpenVMS:  sys$login:.vimrc

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file
endif
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>
noremap <silent> <leader>v v$
nnoremap K k


" In many terminal emulators the mouse works just fine, thus enable it.
"if has('mouse')
"  set mouse=a
"endif
set mouse-=a
" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif
" copy post
" noremap <silent> <leader>p "+p
" noremap <silent> <leader>y "+y
vmap <leader>y y:call system("pbcopy", getreg("\""))<CR>
vmap <leader>p  :call setreg("\"", system("pbpaste"))<CR>p

" find fast
noremap <silent> <leader>ff :FufFile!<CR>
noremap <silent> <leader>fa :FufCoverageFile!<CR>
noremap <silent> <leader>fb :FufBuffer!<CR>
noremap <silent> <leader>fd :FufDir!<CR>
noremap <silent> <leader>fm :FufMruFile!<CR>
noremap <silent> <leader>fw :FufFileWithCurrentBufferDir!<CR>
noremap <silent> <leader>fc :FufMruCmd!<CR>

" window tab
noremap <silent> H <C-W><C-H>
noremap <silent> L <C-W><C-L>
" dir tree and tag list
noremap <F3> :NERDTreeToggle<CR>
noremap <C-r> :NERDTreeFind<CR>
noremap <silent> <F2> :Tlist<CR>
let NERDTreeMapOpenInTab='<ENTER>'
autocmd VimEnter * wincmd p
" Commmand-T: findFile
noremap <silent> <F8> :CommandT<CR>
noremap <silent> <leader>ts :call ToggleSketch()<CR>
" tabnew
nnoremap <silent> tt :tabnew<CR>
nnoremap <silent> <C-A> <Esc>ggVG
nnoremap <silent> = <C-I>
nnoremap <silent> - <C-O>
" quit and save
nnoremap <C-S> :w<CR>
nnoremap <C-Q> :q<CR>

" sudo apt-get install ack-grep
let g:ackprg="ack -H --nocolor --nogroup --column"

let g:SuperTabDefaultCompletionType = "<c-n>"

" CTRL-P BEGIN
"
set wildignore+=*.so,*.swp,*.zip  " MacOSX/Linux
let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$'
let g:ctrlp_user_command = 'find %s -type f'        " MacOSX/Linux
let g:ctrlp_max_height = 30
"
" CTRL-P END

" Tabularize {
"if exists(":Tabularize")
    nmap <Leader>a= :Tabularize /=<CR>
    vmap <Leader>a= :Tabularize /=<CR>
"endif
" }

" Fugitive {
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>gl :Glog<CR>
nnoremap <silent> <leader>gp :Git push<CR>
" }

"" use space to page down
"" nnoremap <silent> <space> <C-F>
"
""nnoremap <silent> j gj
""nnoremap <silent> k gk
""nnoremap <silent> 0 g0
""nnoremap <silent> $ g$
""nnoremap <silent> ^ g^
"
"augroup mkd
"  autocmd BufRead *.mkd,*.markdown set ai formatoptions=tcroqn2 comments=n:>
"augroup END
map <Leader>rt :!ctags --extra=+f --exclude=.git --exclude=.js --exclude=.css --exclude=log -R * `rvm gemdir`/gems/*<CR><CR>

inoreabbr pry require "pry";binding.pry
iabbrev ----- -----------------------------------------
" iabbrev ### #####
iabbrev WR !!!!! WARNING !!!!!
iabbrev PA #{PATH}/#{@project}
iabbrev edn end
abbrev so source ~/.vimrc<CR>
"noreabbr Q q
"noreabbr W w
"iabbr -p puts "--------------------------------------"
let g:runRubyKey = "<leader>rr"
let g:toggleRubyCommentKey = "<leader>rc"

let g:Powerline_symbols = 'fancy'

"" txtbrowser
au BufRead,BufNewFile *.txt setlocal ft=ruby
"
"" vimim begin
""
"" let g:vimim_static_input_style = 2
"" let g:vimim_static_input_style = 0
"
"" let g:vimim_cloud_sogou = -1
"let g:vimim_cloud_sogou = 5
"
"let g:vimim_chinese_frequency = 20
"
"" vimim end
set t_Co=256
set nobackup       "no backup files
set nowritebackup  "only in case you don't want a backup file while editing

"highlight Pmenu    guibg=darkgrey  guifg=black
highlight Pmenu ctermbg=238 gui=bold
highlight PmenuSel guibg=lightgrey guifg=black

autocmd! filetype qf nnoremap <buffer> <leader>l <C-W><Enter><C-W>L

set tags+=./tags,./TAGS,tags;TAGS;$HOME
"set autochdir
"colorscheme railscasts

set clipboard=unnamed

map <c-u> :Ag -i
set runtimepath^=~/.vim/bundle/ag

set cscopequickfix=s-,c-,d-,i-,t-,e-
if has("cscope")
  set csprg=/usr/bin/cscope
  set csto=1
  set cst
  set nocsverb
  set cspc=3
  "add any database in current dir
  if filereadable("cscope.out")
    cs add cscope.out
    "else search cscope.out elsewhere
  else
    let cscope_file=findfile("cscope.out", ".;")
    if !empty(cscope_file)&&filereadable(cscope_file)
      exe "cs add" cscope_file
    endif
  endif
  set csverb
endif

"if has("cscope")
"  set csprg=/usr/bin/cscope              "指定用来执行 cscope 的命令
"  set csto=1                             "先搜索tags标签文件，再搜索cscope数据库
"  set cst                                "使用|:cstag|(:cs find g)，而不是缺省的:tag
"  set nocsverb                           "不显示添加数据库是否成功
"  " add any database in current directory
"  if filereadable("cscope.out")
"    cs add cscope.out         "添加cscope数据库
"  else
"    let cscope_file=findfile("cscope.out", ".;")
"    let cscope_pre=matchstr(cscope_file, ".*/")
"    if !empty(cscope_file) && filereadable(cscope_file)
"      exe "cs add" cscope_file cscope_pre
"    endif
"  endif
"  set csverb                "显示添加成功与否
"endif
"
nmap <C-s> :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-g> :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-c> :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-e> :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-f> :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-i> :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-d> :cs find d <C-R>=expand("<cword>")<CR><CR>
